" Basic configuration
set nocompatible
filetype off

" Include Vundle
set rtp+=~/.vim/bundle/Vundle.vim

" Plugins
call vundle#begin()
Plugin 'gmarik/Vundle'
Plugin 'Shougo/neocomplete.vim'
Plugin 'tomtom/tlib_vim'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'bling/vim-airline'
Plugin 'kien/ctrlp.vim'
Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'edkolev/promptline.vim'
Plugin 'edkolev/tmuxline.vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'
Plugin 'Raimondi/delimitMate'
Plugin 'airblade/vim-gitgutter'
Plugin 'jamessan/vim-gnupg'
Plugin 'tpope/vim-speeddating'
Plugin 'vim-scripts/SyntaxRange'
Plugin 'mattn/calendar-vim'
Plugin 'vim-scripts/utl.vim'
Plugin 'tpope/vim-repeat'
Plugin 'jceb/vim-orgmode'
Plugin 'ragesalmon/syntact'
Plugin 'oblitum/rainbow'
Plugin 'godlygeek/tabular'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-notes'
call vundle#end()
filetype plugin indent on

" My options
"" General Options
set langmenu=en_US.UTF-8
let $LANG = 'en'
set autoindent
set rnu
set nu
set hidden
syntax on
set ignorecase
set smartcase
set hls
set lbr
set encoding=utf-8
set foldmethod=marker
"" Change tab to four spaces
set tabstop=4
set shiftwidth=4
set expandtab
"" Visual bell and cursorline
set visualbell
set cursorline
"" Leader
let mapleader = ","
"" other stuff
set showmode
set backup
set backupdir=~/.vimbackups
set dir=~/.vimbackups
"" Disable cursor blink
set guicursor+=n-v-c:blinkon0
"" change default shell on linux
if has("unix")
    set shell=/usr/bin/bash
endif

" Visual Options
"" Font
set guifont="Source Code Pro for Powerline 10"
"" Colorscheme
colorscheme syntact
"" remove gui stuff
set guioptions-=m
set guioptions-=T
set guioptions-=r


" Plugin Specific options
"" Neocomplete options
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 4
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
"" Tab completion
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
if !exists('g:neocomplete#sources#omni#input_patterns')
	let g:neocomplete#sources#omni#input_patters = {}
endif

"" GitGutter
highlight clear SignColumn

"" Airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#show_tab_type = 1
set laststatus=2

"" DelimitMate
let delimitMate_autoclose = 1
let delimitMate_expand_cr = 1
let delimitMate_matchpairs = "{:},[:],(:),<:>"
let delimitMate_jump_expansion = 1
set backspace=2

"" Tagbar
let g:tagbar_autoclose = 1

"" Syntastic
let g:syntastic_enable_signs = 1
let g:syntastic_enable_highlighting = 1
let g:syntastic_enable_balloons = 1
let g:syntastic_mode_map = { "mode": "active", "active_filetypes": [], "passive_filetypes": []}

"" Rainbow Parens
let g:rainbow_active = 1

"" Vim Notes
let g:notes_directories = ['~/dotfiles/documents/notes/']

" Custom mappings
noremap <F9> :e ~/.vimrc<CR>
noremap <F6> :so ~/.vimrc<CR>

nnoremap ; :
nnoremap <silent> <Leader>w :%s/\s\+$//<CR>
nnoremap <silent> <Leader>l :bnext<CR>
nnoremap <silent> <Leader>h :bprev<CR>
nnoremap <silent> <C-s> :w <CR>
nnoremap <silent> <Leader>t :TagbarToggle<CR>
nnoremap <silent> <Leader>n :NERDTreeToggle<CR>
nnoremap <silent> <leader>cd :cd %:p:h<CR>
