" Basic configuration {{{
set nocompatible
filetype off
" }}}
" Include Vundle {{{
set rtp+=~/.vim/bundle/Vundle
" }}}
" Plugins {{{
call vundle#begin()
Plugin 'gmarik/Vundle'
Plugin 'Shougo/neocomplete.vim'
Plugin 'tomtom/tlib_vim'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'bling/vim-airline'
Plugin 'kien/ctrlp.vim'
Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'edkolev/promptline.vim'
Plugin 'edkolev/tmuxline.vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'Raimondi/delimitMate'
Plugin 'airblade/vim-gitgutter'
Plugin 'jamessan/vim-gnupg'
Plugin 'tpope/vim-speeddating'
Plugin 'vim-scripts/SyntaxRange'
Plugin 'mattn/calendar-vim'
Plugin 'vim-scripts/utl.vim'
Plugin 'tpope/vim-repeat'
Plugin 'jceb/vim-orgmode'
Plugin 'zovt/syntact'
Plugin 'zovt/mysnippets'
Plugin 'oblitum/rainbow'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-notes'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'godlygeek/csapprox'
Plugin 'junegunn/vim-easy-align'
Plugin 'mhinz/vim-startify'
Plugin 'sjl/gundo.vim'
Plugin 'fatih/vim-go'
call vundle#end()
" }}}
" My options {{{
"" General Options {{{
filetype plugin indent on
set langmenu=en_US.UTF-8
let $LANG = 'en'
set autoindent
set rnu
set nu
set hidden
syntax on
set ignorecase
set smartcase
set hls
set lbr
set encoding=utf-8
set foldmethod=marker
set conceallevel=2
"" }}}
"" Change tab to four spaces {{{
set tabstop=4
set shiftwidth=4
set expandtab
"" }}}
"" Visual bell and cursorline {{{
set visualbell
set cursorline
"" }}}
"" Leader {{{
let mapleader = " "
nnoremap <Space> <nop>
"" }}}
"" other stuff {{{
set showmode
set backup
set backupdir=~/.vimbackups//
set dir=~/.vimbackups//
"" }}}
"" Disable cursor blink {{{
set guicursor+=a:blinkon0
"" }}}
"" change default shell on linux {{{
if has("unix")
    set shell=/usr/bin/bash
endif
"" }}}
" }}}
" Visual Options {{{
"" Font {{{
if has("unix")
    set guifont=Input\ Mono\ 10
else
    set guifont=InputMono:h10:cANSI
endif
"" }}}
"" Colorscheme {{{
colorscheme syntact
"" }}}
"" remove gui stuff {{{
set guioptions-=m
set guioptions-=T
set guioptions-=r
"" }}}
" }}}
" Windows {{{
"" Auto resize windows {{{
au VimResized * exe "normal! \<c-w>="
"" }}}
"" Window movement binds {{{
nnoremap <silent> <Leader>wl <c-w>l
nnoremap <silent> <Leader>wh <c-w>h
nnoremap <silent> <Leader>wj <c-w>j
nnoremap <silent> <Leader>wk <c-w>k
"" }}}
"" Window creation binds {{{
nnoremap <silent> <Leader>wv :vsplit<CR>
nnoremap <silent> <Leader>ws :split<CR>
nnoremap <silent> <Leader>wq :hide<CR>
nnoremap <silent> <Leader>wx :only<CR>
"" }}}
" }}}
" Auto-Resume line {{{
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") <= line("$") |
        \       execute 'normal! g`"zvzz' |
        \ endif
augroup END
" }}}
" Highlight character if line length is greater than 80 {{{
match ColorColumn /\%81v.\+/
" }}}
" Custom conceal charaters {{{
augroup custom_conceals
    au!
    autocmd BufReadPost,BufNewFile *
                \ if &filetype =~ "conf" || &filetype =~ "notes" |
                \      syntax match noteChar "->" conceal cchar=âžž |
                \ endif |
                \ set cole=2
augroup END
" }}}
" Plugin Specific options {{{
"" Neocomplete options {{{
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 4
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
"" }}}
"" Tab completion {{{
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
if !exists('g:neocomplete#sources#omni#input_patterns')
	let g:neocomplete#sources#omni#input_patters = {}
endif
"" }}}
"" GitGutter {{{
highlight clear SignColumn
"" }}}
"" Airline {{{
let g:airline_powerline_fonts = 0
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#show_tab_type = 1
let g:airline_left_sep=''
let g:airline_right_sep=''
 let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''
set laststatus=2
"" }}}
"" DelimitMate {{{
let delimitMate_autoclose = 1
let delimitMate_expand_cr = 1
let delimitMate_matchpairs = "{:},[:],(:),<:>"
let delimitMate_jump_expansion = 1
set backspace=2
"" }}}
"" Tagbar {{{
let g:tagbar_autoclose = 1
nnoremap <silent> <Leader>t :TagbarToggle<CR>
"" }}}
"" Syntastic {{{
let g:syntastic_enable_signs = 1
let g:syntastic_enable_highlighting = 1
let g:syntastic_enable_balloons = 1
let g:syntastic_mode_map = { "mode": "active", "active_filetypes": [], "passive_filetypes": []}
"" }}}
"" Rainbow Parens {{{
let g:rainbow_active = 1
"" }}}
"" Vim Notes {{{
let g:notes_directories = ['~/dotfiles/documents/notes/']
"" }}}
"" NERDTree {{{
nnoremap <silent> <Leader>n :NERDTreeToggle<CR>
""}}}
"" UltiSnips {{{
let g:UltiSnipsExpandTrigger="<s-enter>"
let g:UltiSnipsListSnippets="<c-tab>"
let g:UltiSnipsJumpForwardTrigger="<s-enter>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
"" }}}
"" EasyAlign {{{
vmap <enter> :EasyAlign
"" }}}
"" Go Vim {{{
if has("unix")
    let $GOPATH=
else
    let $GOPATH="C:/Go/"
end
"" }}}
" }}}
" Custom mappings {{{
"" Sourcing vimrc {{{
noremap <F9> :e ~/.vimrc<CR>
noremap <F6> :so ~/.vimrc<CR>
"" }}}
"" Switch ; to : {{{
nnoremap ; :
"" }}}
"" Hard left and right {{{
nnoremap L $
nnoremap H ^
"" }}}
"" Folding {{{
nnoremap <silent> <Leader>z zMzvzz
nnoremap <silent> <Leader><Space> za
"" }}}
"" Quickfix current search {{{
nnoremap <silent> <Leader>/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>
"" }}}
"" Remove all trailing whitespace {{{
nnoremap <silent> <Leader>w :%s/\s\+$//<CR>
"" }}}
"" Buffer manipulation {{{
nnoremap <silent> <Leader>l :bnext<CR>
nnoremap <silent> <Leader>h :bprev<CR>
nnoremap <silent> <Leader>d :bdel<CR>
"" }}}
"" Misc {{{
nnoremap <silent> <C-s> :w <CR>
nnoremap <silent> <leader>cd :cd %:p:h<CR>
nnoremap <silent> <leader>gg :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
"" }}}
" }}}
