" vim: set foldmethod=marker foldlevel=0:
" basics {{{
" default
set nocompatible

" change tab width
set tabstop=2
set shiftwidth=2

" show line numbers
set number

" show most recent command in bottom bar
set showcmd

" highlight current line
set cursorline

" indent based on filetype
filetype indent on

" set wildmenu
set wildmenu

" make at least 1 line visible when scrolling
set scrolloff=5

" only redraw when needed
set lazyredraw

" show matching parens
set showmatch

" incremental searching with highlights
set incsearch
set hlsearch

" enable modeline
set modelines=1

" turn on folding
set foldenable
set foldmethod=indent

" show all folds by default
set foldlevelstart=10

" set maximum fold number
set foldnestmax=10

" visual bell
set visualbell

" make backspace good
set backspace=indent,eol,start

" change backups
set backupdir=~/vimfiles/backups//
set directory=~/vimfiles/backups//,.

" keep files open even when to shown on screen
set hidden
" }}}
" plugins {{{
set runtimepath^=~/vimfiles/plug
call plug#begin('~/vimfiles/plugged')

" Colorscheme
Plug 'zovt/simple-colorschemes'

" Ctrl-P
Plug 'ctrlpvim/ctrlp.vim'

" NerdTREE
Plug 'scrooloose/nerdtree'

" rust highlighting
Plug 'rust-lang/rust.vim'

" racer
Plug 'racer-rust/vim-racer'

" delimitMate
Plug 'Raimondi/delimitMate'

" Rainbow
Plug 'luochen1990/rainbow'

" Syntastic
Plug 'scrooloose/syntastic'

" Gundo.vim
Plug 'sjl/gundo.vim'

" vim-buftabline
Plug 'ap/vim-buftabline'

" vim-markdown
Plug 'plasticboy/vim-markdown'

call plug#end()

" Plugin Options {{{
" vim-racer
let $RUST_SRC_PATH = "C:/Program Files/Rust stable GNU 1.6/src/src"
" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_cpp_include_dirs = [ "C:\tools\mingw64\x86_64-w64-mingw32\include" ]
let g:syntastic_cpp_compiler_options = ' -std=c++14'

" Gundo
let g:gundo_width = 40
let g:gundo_preview_height = 40
let g_gundo_right = 1

" }}}
" }}}
" Visual {{{
if has("win32")
	set guifont=Iosevka:h14:cANSI:qDRAFT
else
	set guifont=Iosevka\ 14
endif
set guicursor+=a:blinkon0
set guioptions-=T
set guioptions-=m
set guioptions-=r
set guioptions-=L
set ruler
colorscheme simple-light

" syntax highlighting
syntax enable
syntax on

" set colorcolumn
set colorcolumn=80

" soft wrapping
set wrap
set linebreak
set nolist

" show tabline
set showtabline=2
" }}}
" Keybinds {{{
" leader
let mapleader="\<Space>"
nmap <space> <nop>

" leader space open/closes folds
nnoremap <TAB> za
nnoremap <S-Tab> zMzv

" turn off highlights
nnoremap <leader>z :nohlsearch<CR>

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" move to end of line with CTRL-E in insert mode, and the front with CTRL-A
inoremap <C-a> <esc>0i
inoremap <C-e> <esc>$a

" map jk to esc
inoremap jk <esc>

" make ; :
nnoremap ; :

" load vimrc
nnoremap <leader>lv :source ~/_vimrc<CR>

" edit vimrc
nnoremap <leader>ev :e ~/_vimrc<CR>

" move between windows
nnoremap <leader>wh <C-w>h
nnoremap <leader>wl <C-w>l
nnoremap <leader>wj <C-w>j
nnoremap <leader>wk <C-w>k
nnoremap <leader>wq <C-w>q

" open new splits
nnoremap <leader>wH <C-W>S
nnoremap <leader>wV <C-W>v

" buffers
nnoremap <leader>bn :bnext<CR>
nnoremap <leader>bp :bprev<CR>

" change to current directory
nnoremap <leader>cd :lcd %:p:h<CR>

" NERDTree
nnoremap <leader>n :NERDTreeToggle<CR>

" Gundo
nnoremap U :GundoToggle<CR>
" }}}
