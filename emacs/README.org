* Introduction
	This is my Emacs configuration. The main features are:
	- Uh, all of it

* Configuration
** Theme
#+BEGIN_SRC emacs-lisp :tangle yes

;;(defun use-default-theme ()
;;(interactive)
;;(load-theme 'better-tango-dark))
;;(use-default-theme)

(load-theme 'tango-dark t)

#+END_SRC

** Basics
*** Visual
		Basic visual changes, mostly disabling the UI
#+BEGIN_SRC emacs-lisp :tangle yes

;; Don't defer screen updates when performing operations
(setq redisplay-dont-pause t)

;; No splash screen please ... jeez
(setq inhibit-startup-message t)

;; Highlight matching parentheses when the point is on them.
(show-paren-mode 1)

;; Sweet window-splits
(defadvice split-window-right (after balance activate) (balance-windows))
(defadvice delete-window (after balance activate) (balance-windows))

;; No error bell
(setq-default initial-scratch-message "")
(setq-default inhibit-startup-message t)
(setq-default visible-bell t)

;; Turn off obnoxious bars
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode -1)
(blink-cursor-mode 0)

;; Highlight line, modify line bg
(global-hl-line-mode 1)
(set-face-background 'hl-line "#3e4446")
(set-face-foreground 'highlight nil)
#+END_SRC

*** Font
#+BEGIN_SRC emacs-lisp :tangle yes

;;(set-face-font "Fantastique Sans Mono-16")
;;(set-default-font "DejaVu Sans Mono")
(set-default-font "Roboto Mono 12")
(set-face-attribute 'default nil :family "Roboto Mono" :height 110)
(global-prettify-symbols-mode)
#+END_SRC

*** Custom file
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
#+END_SRC

*** Backups
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default backup-directory-alist '(("" . "~/.emacs.d/backups")))
#+END_SRC

*** Start server
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'after-init-hook 'server-start)
#+END_SRC

*** Confirm kill emacs
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default confirm-kill-emacs 'yes-or-no-p)
#+END_SRC

*** repeat mark command pop
		This makes the mark popping command repeat when hit multiple times in
		succession
#+BEGIN_SRC emacs-lisp :tangle yes

(setq-default set-mark-command-repeat-pop t)

#+END_SRC

*** Blink modeline on err
    		Remove the obnoxious bell, and just blink a line on an error.
#+BEGIN_SRC emacs-lisp :tangle yes
;; Don't beep. Don't visible-bell (fails on el capitan).
;; Just blink the modeline on errors.
(setq visible-bell nil)
(setq ring-bell-function (lambda ()
                           (invert-face 'mode-line)
                           (run-with-timer 0.05 nil 'invert-face 'mode-line)))
#+END_SRC

*** Sane defaults
	 This is used to load customizations that I don't want to track in git.
#+BEGIN_SRC emacs-lisp :tangle yes
;; Allow pasting selection outside of Emacs
(setq x-select-enable-clipboard t)

;; Auto refresh buffers
(global-auto-revert-mode 1)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

;; Show keystrokes in progress
(setq echo-keystrokes 0.1)

;; Move files to trash when deleting
(setq delete-by-moving-to-trash t)

;; Real emacs knights don't use shift to mark things
(setq shift-select-mode nil)

;; Transparently open compressed files
(auto-compression-mode t)

;; Enable syntax highlighting for older Emacsen that have it off
(global-font-lock-mode t)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)

;; Undo/redo window configuration with C-c <left>/<right>
(winner-mode 1)

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top

;; Show active region
(transient-mark-mode 1)
(make-variable-buffer-local 'transient-mark-mode)
(put 'transient-mark-mode 'permanent-local t)
(setq-default transient-mark-mode t)

;; Don't highlight matches with jump-char - it's distracting
(setq jump-char-lazy-highlight-face nil)

;; Always display line and column numbers
(setq line-number-mode t)
(setq column-number-mode t)

;; Lines should be 80 characters wide, not 72
(setq fill-column 80)

;; Save minibuffer history
(savehist-mode 1)
(setq history-length 1000)

;; DO insert tabs
(set-default 'indent-tabs-mode t)

;; Show me empty lines after buffer end
(set-default 'indicate-empty-lines t)

;; Easily navigate sillycased words
(global-subword-mode 1)

;; Don't break lines for me, please
(setq-default truncate-lines nil)

;; Allow recursive minibuffers
(setq enable-recursive-minibuffers t)

;; Don't be so stingy on the memory, we have lots now. It's the distant future.
(setq gc-cons-threshold 20000000)

;; org-mode: Don't ruin S-arrow to switch windows please (use M-+ and M-- instead to toggle)
(setq org-replace-disputed-keys t)

;; Fontify org-mode code blocks
(setq org-src-fontify-natively t)

;; Sentences do not need double spaces to end. Period.
(set-default 'sentence-end-double-space nil)

;; 100 chars is a good width.
(set-default 'fill-column 100)

;; A saner ediff
(setq ediff-diff-options "-w")
(setq ediff-split-window-function 'split-window-horizontally)
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

;; No electric indent
(setq electric-indent-mode nil)

;; Nic says eval-expression-print-level needs to be set to nil (turned off) so
;; that you can always see what's happening.
(setq eval-expression-print-level nil)

;; When popping the mark, continue popping until the cursor actually moves
;; Also, if the last command was a copy - skip past all the expand-region cruft.
(defadvice pop-to-mark-command (around ensure-new-position activate)
  (let ((p (point)))
    (when (eq last-command 'save-region-or-current-line)
      ad-do-it
      ad-do-it
      ad-do-it)
    (dotimes (i 10)
      (when (= p (point)) ad-do-it))))

(setq set-mark-command-repeat-pop t)

#+END_SRC

** Packaging
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'package)
#+END_SRC

*** Repositories
		These contain the packages that I install later.
#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/") t)

(package-initialize)
#+END_SRC

*** Use-package
		I use use-package to install and configure my packages. This checks if
		use-package is installed and if not, installs it.
#+BEGIN_SRC emacs-lisp :tangle yes
(if (not (package-installed-p 'use-package))
    (progn (package-refresh-contents) (package-install 'use-package)))
#+END_SRC

*** Vendoring
		This allows me to load code which is not on any of the package repositories
		in Emacs-Lisp
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default vendor-dir "~/.emacs.d/vendor")
(defun vendor-and-load-remote-file (remote local-name)
  "Automatically save REMOTE to LOCAL-NAME under `vendor-dir'."
  (if (not (file-exists-p vendor-dir))
      (make-directory vendor-dir))
  (let ((local-file (expand-file-name local-name vendor-dir)))
    (if (not (file-exists-p local-file))
        (url-copy-file remote local-file))
    (load-file local-file)))
#+END_SRC

** Packages and Modes
	 This is where most of the magic happens. Here I load various packages and
	 modes and configure them.
*** Ace-window
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ace-window :ensure t :config (setq-default aw-dispatch-always t))
#+END_SRC

*** All-the-icons
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons :ensure t
  :config
  (setq all-the-icons-color-icons nil))
#+END_SRC

**** all-the-icons-dired
		 
**** 
**** 
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package all-the-icons-dired :ensure t
  :config
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

*** Auto-fill-mode for comments
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'prog-mode-hook (lambda ()
                            (interactive)
                            (auto-fill-mode 1)
                            (setq comment-auto-fill-only-comments t)))
#+END_SRC

*** Auto-complete
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package auto-complete :ensure t
  :config
  (add-to-list 'ac-dictionary-directories
    "~/.emacs.d/.cask/24.3.50.1/elpa/auto-complete-20130724.1750/dict")
  (ac-config-default)
  (setq ac-ignore-case nil)
  (add-to-list 'ac-modes 'enh-ruby-mode)
  (add-to-list 'ac-modes 'web-mode))
#+END_SRC

*** Bind-key
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package bind-key :ensure t)
#+END_SRC

*** Company
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company :ensure t
  :config
  (setq-default company-idle-delay 0.3)
  (setq-default company-minimum-prefix-length 4)
  (define-key company-active-map (kbd "C-w") 'kill-region-or-backward-kill-word)
  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

*** Counsel
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel :ensure t)
#+END_SRC

*** Delete-selection-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(delete-selection-mode 1)
#+END_SRC

*** Diff-hl
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package diff-hl :ensure t
  :config
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (global-diff-hl-mode))
#+END_SRC

*** Diminish
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package diminish :ensure t)
#+END_SRC

*** Electric-pair-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(electric-pair-mode)
#+END_SRC

*** Exec path from shell
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package exec-path-from-shell :ensure t :init (when (memq window-system '(mac ns x)) (exec-path-from-shell-initialize)))
#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck :ensure t :init (global-flycheck-mode))
#+END_SRC

*** Ido-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ido :ensure t
  :config
  (setq ido-enable-prefix nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-auto-merge-work-directories-length -1)
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1))

;; Use ido everywhere
(use-package ido-completing-read+ :ensure t
  :config
  (ido-ubiquitous-mode +1))

(use-package flx-ido :ensure t
  :config
  (flx-ido-mode 1)
  ;; disable ido faces to see flx highlights.
  (setq ido-enable-flex-matching t)
  (setq ido-use-faces nil)
  (setq flx-ido-use-faces nil))

#+END_SRC

*** Ivy
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ivy :ensure t
  :init
  (ivy-mode 1)
  :config
  (setq-default ivy-use-virtual-buffers t
                ivy-count-format "(%d/%d) "
                ivy-display-style nil
                ivy-buffer-max-buffer-display-length 40))
#+END_SRC

*** Ledger
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ledger-mode :ensure t
  :config
  (setq-default ledger-mode-should-check-version nil
                ledger-report-links-in-register nil
                ledger-binary-path "hledger"))
#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit :ensure t)
#+END_SRC

*** Multiple cursors
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package multiple-cursors :ensure t
  :config
  (bind-key "C-S-t" 'mc/mark-next-like-this-symbol)
  (bind-key "C-<" 'mc/mark-all-symbols-like-this))
#+END_SRC

*** Neotree
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package neotree :ensure t
  :config
  (setq neo-theme 'icons))
#+END_SRC
*** Nlinum
#+BEGIN_SRC emacs-lisp :tangle yes
	(use-package nlinum :ensure t
		:config
		(global-nlinum-mode))
#+END_SRC
*** Org mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package org :ensure org-plus-contrib :ensure t)
(add-hook 'org-mode-hook (lambda ()
                           (auto-fill-mode)
                           (setq-local fill-column 80)))
(setq-default org-todo-keywords '((sequence
                                   "TODO(t!)"
                                   "IN-PROGRESS(i!)"
                                   "BLOCKED(b@)"
                                   "REVIEW(r@)"
                                   "DONE(d!)"
                                   "CANCELED(c@)"
                                   )))
(bind-key (kbd "C-c C-,") 'org-todo org-mode-map)

(require 'org-element nil t)
(require 'ox-extra nil t)
(ox-extras-activate '(ignore-headlines))
#+END_SRC

*** Popwin
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package popwin :ensure t
  :config
  (popwin-mode 1))
(setq display-buffer-function 'popwin:display-buffer)
(push '("^\\*.*\\*$" :regexp t 
                 :height 25
                 :position bottom)
  popwin:special-display-config)
#+END_SRC

*** Projectile & Friends
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package projectile :ensure t
  :config
  (projectile-mode))

(use-package counsel-projectile :ensure t
  :config
  (counsel-projectile-mode))

(use-package projectile-rails :ensure t
  :config
  (projectile-rails-global-mode))

#+END_SRC

*** Rainbow-delimiters
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rainbow-delimiters :ensure t
  :config
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

*** Recent-file-mode
#+BEGIN_SRC emacs-lisp :tangle yes
;; Save a list of recent files visited. (open recent file with C-x f)
(recentf-mode 1)
(setq recentf-max-saved-items 100) ;; just 20 is too recent
#+END_SRC

*** Rest client
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package restclient :ensure t)
#+END_SRC

*** Ripgrep
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ripgrep :ensure t)
#+END_SRC

*** Robe
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package robe :ensure t)

(add-hook 'ruby-mode-hook 'robe-mode)
(eval-after-load 'company
  '(push 'company-robe company-backends))
(add-hook 'robe-mode-hook 'ac-robe-setup)
#+END_SRC

*** Smartparens
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smartparens :ensure t)
(require 'smartparens-config)
(require 'smartparens-ruby)
(smartparens-global-mode)
(show-smartparens-global-mode t)
(sp-with-modes '(rhtml-mode)
  (sp-local-pair "<" ">")
  (sp-local-pair "<%" "%>"))
#+END_SRC

*** Smart-tabs
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smart-tabs-mode :ensure t :config (smart-tabs-insinuate 'c 'c++ 'javascript))
#+END_SRC

*** Smex
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smex :ensure t)
(smex-initialize)
#+END_SRC

*** Smooth scrolling
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smooth-scrolling :ensure t :config (smooth-scrolling-mode 1))

;; scroll one line at a time (less "jumpy" than defaults)
(setq mouse-wheel-scroll-amount '(2 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
#+END_SRC

*** Swiper
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package swiper :ensure t)
#+END_SRC

*** Undo-tree
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package undo-tree :ensure t :init (global-undo-tree-mode))
#+END_SRC

*** Which-key
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package which-key :ensure t :config (which-key-mode))
#+END_SRC

*** Whitespace-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'whitespace)
(setq-default whitespace-line-column 80
              whitespace-style '(face lines-tail))
(global-whitespace-mode -1) ;; 1 to enable
#+END_SRC

*** Zoom
#+BEGIN_SRC emacs-lisp :tangle yes
;; Zoom affect frame instead of buffer
(use-package zoom-frm :ensure t)
#+END_SRC

** Programming languages
		This is where all of my programming-language-specific configuration
		lives
*** Code Visuals
#+BEGIN_SRC emacs-lisp :tangle yes
(setq-default indent-tabs-mode nil) ;; or "t"
(setq-default tab-width 2) ; Assuming you want your tabs to be two spaces wide
(defvaralias 'c-basic-offset 'tab-width)
(add-hook 'prog-mode-hook 'show-paren-mode)
#+END_SRC

*** JSX Mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rjsx-mode :ensure t
  :config
  (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2))))
#+END_SRC

*** Elixir
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package elixir-mode :ensure t
  :config
  (add-hook 'elixir-mode #'subword-mode))
#+END_SRC

*** Ruby
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package enh-ruby-mode :ensure t
  :config
  (add-hook 'enh-ruby-mode-hook #'subword-mode)
  (add-hook 'enh-ruby-mode-hook 'robe-mode)
  (setq ruby-indent-tabs-mode nil)
  (setq enh-ruby-indent-tabs-mode nil))
  
(use-package rspec-mode :ensure t)

(defvaralias 'ruby-indent-level 'tab-width)
(defvaralias 'enh-ruby-indent-level 'tab-width)

;; Use enh-ruby-mode for all common ruby files
(add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))		 
(add-to-list 'auto-mode-alist '("\\.rake$" . enh-ruby-mode))	
(add-to-list 'auto-mode-alist '("Rakefile$" . enh-ruby-mode))	
(add-to-list 'auto-mode-alist '("\\.gemspec$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("\\.ru$" . enh-ruby-mode))		 
(add-to-list 'auto-mode-alist '("Gemfile$" . enh-ruby-mode))
(add-to-list 'interpreter-mode-alist '("ruby" . enh-ruby-mode))

#+END_SRC

*** Haml
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package haml-mode :ensure t
  :config
  (define-key haml-mode-map "\C-m" 'newline-and-ni))
#+END_SRC

*** Yaml
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yaml-mode :ensure t
  :config
  (define-key yaml-mode-map "\C-m" 'newline-and-indent))
#+END_SRC

*** Lisp and Emacs-Lisp
#+BEGIN_SRC emacs-lisp :tangle yes
(defun disable-tabs () "Disable tabs locally in a buffer." (setq-local indent-tabs-mode nil))
(add-hook 'lisp-mode-hook 'disable-tabs)
(add-hook 'emacs-lisp-mode-hook 'disable-tabs)
#+END_SRC

*** Go
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package go-mode :ensure t
  :config
  (setq-default gofmt-command "goimports")
  (add-hook 'go-mode-hook (lambda ()
                            (add-hook 'before-save-hook 'gofmt-before-save)
                            (subword-mode 1)
                            (setq-local compile-command "noti go test")))
  (define-key go-mode-map (kbd "C-c g d") 'godef-jump)
  (define-key go-mode-map (kbd "C-c g D") 'godef-jump-other-window)
  (define-key go-mode-map (kbd "C-c C")
    (lambda () (interactive)
      (start-process-shell-command "*go integration test*" "*go integration test*"
                                   (concat "cd " (locate-dominating-file default-directory ".git") " && noti make integration-test;"))
      (with-current-buffer "*go integration test*"
        (local-set-key (kbd "C-c C-c") (lambda () (interactive)
                                         (delete-process "*go integration test*")
                                         (kill-buffer "*go integration test*"))))
      (switch-to-buffer-other-window "*go integration test*"))))
(use-package company-go :ensure t :config (add-to-list 'company-backends 'company-go))
#+END_SRC

*** Rust
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck-rust :ensure t
  :config
  (add-hook 'flycheck-mode-hook 'flycheck-rust-setup))
(use-package racer :ensure t)
(use-package rust-mode :ensure t
  :config
  (add-hook 'rust-mode-hook 'racer-mode)
  (add-hook 'racer-mode-hook 'eldoc-mode)
  (add-hook 'rust-mode-hook (lambda ()
                              (setq-local indent-tabs-mode t)
                              (setq-local tab-width 2)
                              (setq-local rust-indent-offset 2)))
  (setq-default rust-format-on-save t)
	(define-key racer-mode-map (kbd "C-c t d") 'racer-find-definition)
	(define-key racer-mode-map (kbd "C-c t D") 'racer-describe))
#+END_SRC

*** MIPS Assembly
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package mips-mode :ensure t)
#+END_SRC
*** Prose (the written word)
#+BEGIN_SRC emacs-lisp :tangle yes
(vendor-and-load-remote-file "https://raw.githubusercontent.com/amperser/proselint/master/plugins/flycheck/flycheck-proselint.el"
                             "flycheck-proselint.el")

(vendor-and-load-remote-file "https://raw.githubusercontent.com/abingham/flycheck-vale/master/flycheck-vale.el"
                             "flycheck-vale.el")
(add-to-list 'flycheck-checkers 'vale 'proselint)
#+END_SRC

*** C / C++ / CMake
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package cmake-mode :ensure t)
(use-package company-cmake :ensure t)
(use-package cmake-ide :ensure t :config (cmake-ide-setup))
#+END_SRC

*** Markdown
#+BEGIN_SRC emacs-lisp :tangle yes
	(use-package markdown-mode
		:ensure t
		:commands (markdown-mode gfm-mode)
		:mode (("README\\.md\\'" . gfm-mode)
					 ("\\.md\\'" . markdown-mode)
					 ("\\.markdown\\'" . markdown-mode))
		:init (setq markdown-command "pandoc -f markdown_github -t html"))
#+END_SRC
*** Terraform
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package terraform-mode :ensure t)
(custom-set-variables
 '(terraform-indent-level 2))
#+END_SRC

** Useful Functions
*** Editing
#+BEGIN_SRC emacs-lisp :tangle yes
(defun scratch () "Create a new scratch buffer."
       (interactive)
       (switch-to-buffer "*scratch*")
       (lisp-interaction-mode))

(defun kill-region-or-backward-kill-word (&optional arg region)
  "`kill-region' if the region is active, otherwise `backward-kill-word'."
  (interactive (list (prefix-numeric-value current-prefix-arg) (use-region-p)))
  (if region (kill-region (region-beginning) (region-end))
    (backward-kill-word arg)))

(defun replace-region-by (fn)
  (let* ((beg (region-beginning))
         (end (region-end))
         (contents (buffer-substring beg end)))
    (delete-region beg end)
    (insert (funcall fn contents))))

(defun save-region-or-current-line (arg)
  (interactive "P")
  (if (region-active-p)
      (kill-ring-save (region-beginning) (region-end))
    (copy-line arg)))

(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))
#+END_SRC

*** Files
#+BEGIN_SRC emacs-lisp :tangle yes
(defun rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let* ((name (buffer-name))
        (filename (buffer-file-name))
        (basename (file-name-nondirectory filename)))
        (if (not (and filename (file-exists-p filename)))
    (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " (file-name-directory filename) basename nil basename)))
      (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
          name (file-name-nondirectory new-name)))))))

(defun delete-current-buffer-file ()
  "Removes file connected to current buffer and kills buffer."
  (interactive)
  (let ((filename (buffer-file-name))
        (buffer (current-buffer))
        (name (buffer-name)))
    (if (not (and filename (file-exists-p filename)))
        (ido-kill-buffer)
      (when (yes-or-no-p "Are you sure you want to remove this file? ")
        (delete-file filename)
        (kill-buffer buffer)
        (message "File '%s' successfully removed" filename)))))

(defun copy-current-file-path ()
  "Add current file path to kill ring. Limits the filename to project root if possible."
  (interactive)
  (let ((filename (buffer-file-name)))
    (kill-new (if eproject-mode
                  (s-chop-prefix (eproject-root) filename)
                filename))))

(defun find-or-create-file-at-point ()
  "Guesses what parts of the buffer under point is a file name and opens it."
  (interactive)
  (find-file (file-name-at-point)))

(defun find-or-create-file-at-point-other-window ()
  "Guesses what parts of the buffer under point is a file name and opens it."
  (interactive)
  (find-file-other-window (file-name-at-point)))

(defun file-name-at-point ()
  (save-excursion
    (let* ((file-name-regexp "[./a-zA-Z0-9\-_~]")
           (start (progn
                    (while (looking-back file-name-regexp)
                      (forward-char -1))
                    (point)))
           (end (progn
                  (while (looking-at file-name-regexp)
                    (forward-char 1))
                  (point))))
      (buffer-substring start end))))
(defun touch-buffer-file ()
  (interactive)
  (insert " ")
  (backward-delete-char 1)
  (save-buffer))

(require 'find-file-in-project)
#+END_SRC

*** Buffers
#+BEGIN_SRC emacs-lisp :tangle yes
(defun create-scratch-buffer nil
  "create a new scratch buffer to work in. (could be *scratch* - *scratchX*)"
  (interactive)
  (let ((n 0)
        bufname)
    (while (progn
             (setq bufname (concat "*scratch"
                                   (if (= n 0) "" (int-to-string n))
                                   "*"))
             (setq n (1+ n))
             (get-buffer bufname)))
    (switch-to-buffer (get-buffer-create bufname))
    (emacs-lisp-mode)
    ))

(defun split-window-right-and-move-there-dammit ()
  (interactive)
  (split-window-right)
  (windmove-right))

(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+END_SRC

** Global Keybinds
*** Quit
#+BEGIN_SRC emacs-lisp :tangle yes
;; REALLY QUIT
(bind-key "C-c r q" 'save-buffers-kill-emacs)
#+END_SRC

*** M-x replacement
#+BEGIN_SRC emacs-lisp :tangle yes
;; Smart M-x
(bind-key "M-x" 'smex)
(bind-key "M-X" 'smex-major-mode-commands)
;; This is your old M-x.
(bind-key "C-c C-c M-x" 'execute-extended-command)
#+END_SRC

*** Window management
#+BEGIN_SRC emacs-lisp :tangle yes

;; Frame management
(bind-key "C-c w o" 'ace-window)
(bind-key "C-c w F" 'make-frame)
(bind-key "C-c w x" 'delete-frame)
(bind-key "C-c w f" 'other-frame)

;; Move windows with or without C-x
(bind-key "C-x C-o" 'other-window)
(bind-key "C-x o" 'other-window)

(bind-key "C-x 3" 'split-window-right-and-move-there-dammit)

#+END_SRC

*** File Finding
#+BEGIN_SRC emacs-lisp :tangle yes
;; Find files by name and display results in dired
(bind-key "M-s f" 'counsel-projectile-find-dir)

(bind-key "C-x f" 'find-file)
(bind-key "C-x C-f" 'find-file)
(bind-key "C-x x C-f" 'counsel-projectile-find-file)
(bind-key "C-x r C-f" 'counsel-projectile-rg)

;; Directory viewer like we all love
(push '(direx:direx-mode :position left :width 25 :dedicated t)
      popwin:special-display-config)
(bind-key "C-x C-j" 'direx:jump-to-directory-other-window)
#+END_SRC

*** Ripgrep
#+BEGIN_SRC emacs-lisp :tangle yes
(bind-key* "C-c r" 'ripgrep-regexp)
(bind-key "C-x r g" 'ripgrep-regexp)
#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp :tangle yes
(bind-key "C-c g" 'magit-status)

#+END_SRC

*** undo-tree
#+BEGIN_SRC emacs-lisp :tangle yes
(bind-key "C-c U" 'undo-tree-visualize)
#+END_SRC

*** Buffers
#+BEGIN_SRC emacs-lisp :tangle yes
;; Eval buffer
(bind-key "C-c C-k" 'eval-buffer)

;; Delete buffer file
(bind-key "C-x C-k" `delete-current-buffer-file)

;; Rename buffer file
(bind-key "C-x C-r" `rename-current-buffer-file)

;; Use Ivy for buffer switch
;; (bind-key "C-x b" 'ido-switch-buffer) ;; Or dont
(bind-key "C-x b" 'ivy-switch-buffer)

;; Multi-occur
(bind-key "M-s m" 'multi-occur)
(bind-key "M-s M" 'multi-occur-in-matching-buffers)

;; Display and edit occurances of regexp in buffer
(bind-key "C-c o" 'occur)

;; Like isearch-*-use-region, but doesn't fuck with the active region
(bind-key "C-S-s" 'isearch-forward)
(bind-key "C-S-r" 'isearch-backward)

;; View occurrence in occur mode
(define-key occur-mode-map (kbd "v") 'occur-mode-display-occurrence)
(define-key occur-mode-map (kbd "n") 'next-line)
(define-key occur-mode-map (kbd "p") 'previous-line)

;; Replace i-search with swiper, better i-search
(bind-key "C-s" 'swiper)
(bind-key "C-r" 'swiper)

;; Ethan's additions
(bind-key* "C-." 'end-of-buffer)
(bind-key* "C-," 'beginning-of-buffer)
(bind-key* "C-'" 'indent-region)

(bind-key "M-{" '(lambda () (interactive) (if (search-forward "{" nil t) (backward-char 1))))

(bind-key "M-}" '(lambda () (interactive) (if (search-forward "}" nil t) (backward-char 1))))
#+END_SRC

*** Editing
#+BEGIN_SRC emacs-lisp :tangle yes
(bind-key "C-S-k" 'kill-whole-line)
(bind-key "C-w" 'kill-region-or-backward-kill-word)

;; Move line up/down
(bind-key "s-S-<up>" 'move-line-up)
(bind-key "s-S-<down>"  'move-line-down)

;; Use M-w for copy-line if no active region
(bind-key "M-w" 'save-region-or-current-line)
(bind-key "s-w" 'save-region-or-current-line)

;; Change word separators
(unbind-key "C-x +") ;; used to be balance-windows
(bind-key "C-x + -" (lambda (replace-region-by 's-dashed-words)))
(bind-key "C-x + _" (lambda (replace-region-by 's-snake-case)))
(bind-key "C-x + c" (lambda (replace-region-by 's-lower-camel-case)))
(bind-key "C-x + C" (lambda (replace-region-by 's-upper-camel-case)))

;; Font size
(bind-key "C-+" 'zoom-frm-in)
(bind-key "C--" 'zoom-frm-out)

(bind-key "s-i" 'copy-inner)
(bind-key "s-o" 'copy-outer)

;; Edit file with sudo
(bind-key "M-s e" 'sudo-edit)

;; Comment/uncomment block
(bind-key "C-c c" 'comment-or-uncomment-region)
(bind-key "C-c u" 'uncomment-region)

#+END_SRC

** Load Local Customizations
	 This is used to load custimizations that I don't want to track in git.
#+BEGIN_SRC emacs-lisp :tangle yes
(if (file-exists-p "~/.emacs.d/local.el") (load-file "~/.emacs.d/local.el"))
#+END_SRC

** Etc.
		Rando commando changes that don't have a proper place.
#+BEGIN_SRC emacs-lisp :tangle yes
;; Seed the RNG
(random t)
#+END_SRC

* The End
#+BEGIN_SRC emacs-lisp :tangle yes
(provide 'init)
;;; init.el ends here
#+END_SRC
