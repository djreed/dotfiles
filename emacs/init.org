#+PROPERTY: header-args :tangle yes :comments org
#+BABEL: :cache yes
* Init.el
** Info
   This is my init.el. It will change from time to time, and sets up packages and settings that I like. Feel free to  use, modify, or redistribute it
** Code
*** Basic Packagingg
    This section sets up the repositiories that I use and also initializes them.
    #+BEGIN_SRC emacs-lisp
(require 'package)
(require 'cl-macs)

(add-to-list 'package-archives
			 '("gnu" . "https://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives
			 '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives
			 '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives
			 '("marmalade" . "http://marmalade-repo.org/packages/") t)

(package-initialize)
(package-refresh-contents)
    #+END_SRC
    
*** My Packages
    Lists packages that I want to install and installs them.
    
    #+BEGIN_SRC emacs-lisp
      (defconst ragesalmon-config-packages
        '(god-mode
          ;; themes
          stekene-theme
          moe-theme
          sublime-themes
          soothe-theme
          ample-theme
          tangotango-theme
          leuven-theme
          tango-plus-theme
          flatui-theme
          flatland-theme
          afternoon-theme
          purple-haze-theme
          birds-of-paradise-plus-theme
          gruvbox-theme
          ;; Modes
          flycheck
          org
          cmake-mode
          semantic
          js2-mode
          yasnippet
          function-args
          auctex
          ;; Utilities
          smex
          helm
          helm-gtags
          helm-anything
          tern
          smartparens
          anything
          neotree
          rainbow-delimiters
          powerline
          aggressive-indent
          undo-tree
          expand-region
          magit
          ;; Company
          company
          company-c-headers
          company-tern
          ))

      (dolist (p ragesalmon-config-packages)
        (if (not (package-installed-p p))
            (package-install p)))
    #+END_SRC
    
*** General Configuration
    #+BEGIN_SRC emacs-lisp
;; Disable cursor blinking
(blink-cursor-mode 0)

;; Don't use unecessary messages
(setq initial-scratch-message "")
(setq inhibit-startup-message t)

;; Turn off bell
(setq visible-bell t)

(setq inhibit-startup-echo-area-message "mondieu")

;; Get rid of scroll bar
(scroll-bar-mode 0)

;; Get rid of gui things
(tool-bar-mode 0)
(menu-bar-mode 0)

;; Set theme location
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(require 'moe-theme)
(moe-dark)

;; Highlight current line
(global-hl-line-mode t)

;; Fullscreen
(if (eq system-type 'windows-nt)
    (toggle-frame-fullscreen))

;; Set Font
(set-face-font 'default "InputMono-10")

;; Tramp settings
(defvar tramp-default-method "plink")

;; Start emacsclient when opening a GUI
(when window-system
  (server-start))

;; Make Git not slow
(if (eq system-type 'windows-nt)
    (progn
      (require 'vc)
      (remove-hook 'find-file-hooks 'vc-find-file-hook)
      (delete 'Git vc-handled-backends)))

;; Tab width
(setq tab-width 4)

;; Change save path
(setq
 backup-by-copying t
 backup-directory-alist '(("." . "~/.saves"))
 auto-save-file-name-transforms '((".*" "~/.saves/" t))
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t)
    #+END_SRC
    
*** Plugin Configuration
**** Org Mode
     #+BEGIN_SRC emacs-lisp
(defvar org-log-done 'time)
(defvar org-agenda-files (list "~/dotfiles/documents/todo/todo.org.gpg"))

(global-set-key (kbd "C-c a") 'org-agenda)
(defvar org-todo-keywords '((type "BUG(b)" "IN-PROGRESS" "WAITING" "|" "FIXED(f@)")
			    (type "SUGGESTION(s)" "ENHANCEMENT(e)" "|" "ADDED(a@)")
			    (type "GOAL(g)" "|" "DONE(d!)")
			    (type "|" "CANCELED(c@)")
			    (type "TODO" "IN-PROGRESS" "WAITING" "|" "DONE(d!)")))

(defvar
  org-export-backends '(ascii
			md
			html
			odt
			org
			latex
			man))

(add-hook 'org-mode-hook (lambda () (visual-line-mode)))
     #+END_SRC
**** Smex
     #+BEGIN_SRC emacs-lisp
       (require 'smex)
       (global-set-key (kbd "M-x") 'smex)
       (global-set-key (kbd "M-X") 'smex-major-mode-commands)
       (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
     #+END_SRC
     
**** Helm
     #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c b") 'helm-buffers-list)
(defvar helm-mode-handle-completion-in-region nil)

(defvar helm-command-prefix-key "C-c h")

(require 'helm-config)
(defvar helm-google-suggest-use-curl-p t)
(defvar helm-quick-update t)
(defvar helm-idle-delay 0.01)
(defvar helm-input-idle-delay 0.01)
(defvar helm-ff-search-library-in-sexp t)

(defvar helm-split-window-default-side 'other )
(defvar helm-split-window-in-side-p t )
(defvar helm-buffers-favorite-modes '(picture-mode artist-mode))
(defvar helm-candidate-number-limit 200 )
(defvar helm-M-x-requires-pattern 0     )
(defvar helm-boring-file-regexp-list '("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$" "\\._darcs$" "\\.la$" "\\.o$" "\\.i$") )
(defvar helm-ff-file-name-history-use-recentf t)
(defvar helm-move-to-line-cycle-in-source t )
(defvar ido-use-virtual-buffers t)
(defvar helm-buffers-fuzzy-matching t)

(helm-mode 1)
     #+END_SRC
     
***** Helm gtags
      #+BEGIN_SRC emacs-lisp
(defvar helm-gtags-prefix-key "\C-cg")

(require 'helm-gtags)

(setq
 helm-gtags-ignore-case t
 helm-gtags-auto-update t
 helm-gtags-use-input-at-cursor t
 helm-gtags-pulse-at-cursor t
 helm-gtags-suggested-key-mapping t
 )

(add-hook 'dired-mode-hook 'helm-gtags-mode)
(add-hook 'eshell-mode-hook 'helm-gtags-mode)

(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
(add-hook 'java-mode-hook 'helm-gtags-mode)
(add-hook 'asm-mode-hook 'helm-gtags-mode)

(define-key helm-gtags-mode-map (kbd "M-s") 'helm-gtags-select)
(define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
(define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
(define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
(define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
      #+END_SRC
      
**** Yasnippet
     #+BEGIN_SRC emacs-lisp
(yas-global-mode 1)
     #+END_SRC
     
**** Semantic
     #+BEGIN_SRC emacs-lisp
(require 'cc-mode)
(require 'semantic)

(global-semanticdb-minor-mode 1)
(global-semantic-idle-scheduler-mode 1)

(semantic-mode 1)
     #+END_SRC
     
**** Function-args
     #+BEGIN_SRC emacs-lisp
(require 'function-args)
(fa-config-default)
(define-key c-mode-map [(tab)] 'moo-complete)
(define-key c++-mode-map [(tab)] 'moo-complete)
     #+END_SRC
     
**** Company
     #+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
(defvar company-backends '(
						   company-clang
						   company-semantic
						   company-gtags
						   company-c-headers
						   company-cmake
						   company-files
						   company-elisp
						   company-auctex
						   company-tern
						   company-css
						   company
						   ))
(defvar company-idle-delay 0.2)
     #+END_SRC
     
**** C Indentation mode
     #+BEGIN_SRC emacs-lisp
(defvar c-defualt-style "linux")
     #+END_SRC
     
**** Smartparens
     #+BEGIN_SRC emacs-lisp
(require 'smartparens-config)
(show-smartparens-global-mode +1)
(smartparens-global-mode 1)

(defun ragesalmon-newline-sp (&rest _ignored)
  "Indent properly when enter is pressed inside of curly braces."
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode)
  )

(sp-local-pair 'c-mode "{" nil  :post-handlers '((ragesalmon-newline-sp "RET")))
(sp-local-pair 'c++-mode "{" nil  :post-handlers '((ragesalmon-newline-sp "RET")))
(sp-local-pair 'js2-mode "{" nil  :post-handlers '((ragesalmon-newline-sp "RET")))
(sp-local-pair 'css-mode "{" nil  :post-handlers '((ragesalmon-newline-sp "RET")))
(setq sp-autoskip-closing-pair (quote always))
(defvar sp-autoescape-string-quote nil)
     #+END_SRC emacs-lisp
     
**** Js2 Mode
     #+BEGIN_SRC emacs-lisp
(autoload 'js2-mode "js2-mode.el" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
     #+END_SRC
     
**** Tern
     #+BEGIN_SRC emacs-lisp
(autoload 'tern-mode "tern.el" nil t)
(add-hook 'js2-mode-hook (lambda () (tern-mode t)))
     #+END_SRC
     
**** Flycheck
     #+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'global-flycheck-mode)
(add-hook 'c++-mode-hook
          (lambda () (setq flycheck-clang-standard-library "libc++")))
(add-hook 'c++-mode-hook
          (lambda () (setq flycheck-clang-language-standard "c++11")))

(add-hook 'c-mode-hook
          (lambda () (setq flycheck-clang-standard-library "libc")))

(if (eq system-type 'windows-nt)
    (progn
      (add-hook 'c++-mode-hook
				(lambda () (setq flycheck-clang-include-path
								 (list (expand-file-name "C:/msys64/mingw64/include")
									   (expand-file-name "C:/msys64/mingw64/x86_64-w64-mingw32/include")))))
      (add-hook 'c-mode-hook
				(lambda () (setq flycheck-clang-include-path
								 (list (expand-file-name "C:/msys64/mingw64/include")
									   (expand-file-name "C:/msys64/mingw64/x86_64-w64-mingw32/include")))))
      )
  )

(defvar flycheck-idle-change-delay 5.0)
     #+END_SRC
     
**** Anything
     #+BEGIN_SRC emacs-lisp
(require 'anything-match-plugin)
(require 'anything-config)
     #+END_SRC
     
**** Neotree
     #+BEGIN_SRC emacs-lisp
(require 'neotree)
     #+END_SRC
     
**** Rainbow delimiters
     #+BEGIN_SRC emacs-lisp
(require 'rainbow-delimiters)
(add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode-enable)
(add-hook 'c-mode-hook 'rainbow-delimiters-mode-enable)
(add-hook 'c++-mode-hook 'rainbow-delimiters-mode-enable)
     #+END_SRC
     
**** Encryption
     #+BEGIN_SRC emacs-lisp
(epa-file-enable)
     #+END_SRC
     
**** Powerline
     #+BEGIN_SRC emacs-lisp
       (require 'powerline)
       (setq-default powerline-default-separator 'bar)
       (setq-default mode-line-format
                     '("%e"
                       (:eval
                        (let* ((active (powerline-selected-window-active))
                               (mode-line (if active 'mode-line 'mode-line-inactive))
                               (face1 (if active 'powerline-active1 'powerline-inactive1))
                               (face2 (if active 'powerline-active2 'powerline-inactive2))
                               (middle-face (if active 'powerline-inactive1 'powerline-active2))
                               (separator-left (intern (format "powerline-%s-%s" powerline-default-separator (car powerline-default-separator-dir))))
                               (separator-right (intern (format "powerline-%s-%s" powerline-default-separator (cdr powerline-default-separator-dir))))
                               (lhs (list (if (buffer-modified-p) (powerline-raw " (MOD)") (powerline-raw " -----"))
                                          (powerline-raw " ")
                                          (powerline-major-mode)
                                          (powerline-raw ":")
                                          (powerline-buffer-id nil 'l)
                                          (powerline-buffer-size nil 'l)
                                          (powerline-raw " ")
                                          (funcall separator-left mode-line face1)
                                          (powerline-raw " " face1 face2)
                                          (powerline-minor-modes face1 face2)
                                          (powerline-raw " " face1 face2)
                                          (funcall separator-left face1 middle-face)))
                               (rhs (list
                                     (funcall separator-right middle-face mode-line)
                                     (powerline-raw "%4l")
                                     (powerline-raw ":")
                                     (powerline-raw " %3c")
                                     (funcall separator-right mode-line face2)
                                     (powerline-raw " " face2 'r)
                                     (powerline-raw (format-time-string "%H:%M:%S") face2 'r)
                                     (powerline-raw " " face2 'r)
                                     (powerline-hud face2 face1))))
                          (concat (powerline-render lhs)
                                  (powerline-fill middle-face (powerline-width rhs))
                                  (powerline-render rhs))))))
     #+END_SRC
     
**** Auctex
     #+BEGIN_SRC emacs-lisp
(defvar TeX-auto-save t)
(defvar TeX-parse-self t)
(defvar TeX-master nil)

(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)


(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(defvar reftex-plug-into-AUCTeX t)
(require 'tex)
(TeX-global-PDF-mode t)

(defvar buffer-sans-gpg nil)
(defun ragesalmon-enable-gpg-TeX-compile()
  "This function will quickly write a file with extension .tex and compile it, and then delete it."
  (interactive)
  (setq buffer-sans-gpg (replace-regexp-in-string "\.gpg" "" (file-truename buffer-file-name)))
  (add-hook 'after-save-hook (progn
							   (with-current-buffer (find-file-noselect buffer-sans-gpg)
								 (save-buffer)
								 (tex-compile default-directory)
								 (delete-file buffer-sans-gpg))) nil t))
     #+END_SRC
     
**** Aggressive Indent mode
     #+BEGIN_SRC emacs-lisp
(global-aggressive-indent-mode 1)
(add-to-list 'aggressive-indent-excluded-modes 'html-mode)
     #+END_SRC
     
**** God-mode
     #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<escape>") 'god-local-mode)
     #+END_SRC
     
**** Expand-Region
	 #+BEGIN_SRC emacs-lisp
  (require 'expand-region)
	 #+END_SRC
**** Undo-Tree
     #+BEGIN_SRC emacs-lisp
       (global-undo-tree-mode)
     #+END_SRC
*** Keybindings
	#+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c C-=") 'indent-whole-buffer)
      (global-set-key (kbd "C-S-f") 'forward-word)
      (global-set-key (kbd "C-S-b") 'backward-word)
      (global-set-key (kbd "C-c n") 'neotree)
      (global-set-key (kbd "C-x u") 'undo-tree-visualize)
      (global-set-key (kbd "C-S-d") 'kill-word)
      (global-set-key (kbd "C-c o") 'helm-buffer-list)
      (global-set-key (kbd "C-c x") 'kill-other-buffers)
      (global-set-key (kbd "C-c f") 'anything)
      (global-set-key (kbd "C->") 'end-of-buffer)
      (global-set-key (kbd "C-<") 'beginning-of-buffer)
      (global-set-key (kbd "C-=") 'er/expand-region)
      (global-set-key (kbd "C-c h") 'backward-char)
      (global-set-key (kbd "C-c H") 'backward-word)
      (global-set-key (kbd "C-c l") 'forward-char)
      (global-set-key (kbd "C-c L") 'forward-word)
      (global-set-key (kbd "C-c r") 'align-regexp)
	#+END_SRC
*** Custom Functions
    #+BEGIN_SRC emacs-lisp
      ;; Delete all but current buffer
      (defun kill-other-buffers ()
        "Kill all other buffers."
        (interactive)
        (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

      (defun indent-whole-buffer ()
        "Indent the whole buffer."
        (interactive)
        (point-to-register ?m)  
        (mark-whole-buffer)
        (indent-region (region-beginning) (region-end))
        (jump-to-register ?m))

    #+END_SRC
	
** Provide Init
   #+BEGIN_SRC emacs-lisp
(provide 'init)
   #+END_SRC
