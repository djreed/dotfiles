#+PROPERTY: header-args :tangle yes :comments org
#+BABEL: :cache yes
* Info
  This is my init.el. It will change from time to time, and sets up packages and settings that I like. Feel free to  use, modify, or redistribute it
* Code
** Basic Packaging
   This section sets up the repositiories that I use and also initializes them.
    #+BEGIN_SRC emacs-lisp
(require 'package)
(require 'cl-macs)

(add-to-list 'package-archives
			 '("gnu" . "https://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives
			 '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives
			 '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives
			 '("marmalade" . "http://marmalade-repo.org/packages/") t)

(package-initialize)
(package-refresh-contents)
    #+END_SRC
    
** My Packages
   Lists packages that I want to install and installs them.
   
   #+BEGIN_SRC emacs-lisp
     (defconst ragesalmon-config-packages
       '(;; themes
         material-theme
         ;; Modes
         flycheck
         flymake-hlint
         org
         cmake-mode
         semantic
         js2-mode
         auctex
         slime
         rust-mode
         skewer-mode
         processing-mode
         web-mode
         jade-mode
         haskell-mode
         arduino-mode
         elixir-mode
         ;; Utilities
         smex
         ess
         helm
         helm-gtags
         helm-anything
         tern
         smartparens
         anything
         neotree
         rainbow-delimiters
         powerline
         aggressive-indent
         undo-tree
         expand-region
         magit
         ace-jump-mode
         ;; Company
         company
         company-c-headers
         company-tern
         company-ghc
         slime-company
         ;; Evil
         evil))

     (dolist (p ragesalmon-config-packages)
       (if (not (package-installed-p p))
           (package-install p)))
   #+END_SRC
   
** General Configuration
    #+BEGIN_SRC emacs-lisp
      ;; Disable cursor blinking
      (blink-cursor-mode 0)

      ;; Don't use unecessary messages
      (setq initial-scratch-message "")
      (setq inhibit-startup-message t)

      ;; Turn off bell
      (setq visible-bell t)

      (setq inhibit-startup-echo-area-message "mondieu")

      ;; Get rid of scroll bar
      (scroll-bar-mode 0)

      ;; Get rid of gui things
      (tool-bar-mode 0)
      (menu-bar-mode 0)

      ;; Set theme
      (load-theme 'material-light)

      ;; Set Font
      (set-face-font 'default "Meslo LG S-12")

      ;; Linum
      (global-linum-mode)

      ;; Tramp settings
      (defvar tramp-default-method "plink")

      ;; Start emacsclient when opening a GUI
      (when window-system
        (server-start))

      ;; Make Git not slow
      (if (eq system-type 'windows-nt)
          (progn
            (require 'vc)
            (remove-hook 'find-file-hooks 'vc-find-file-hook)
            (delete 'Git vc-handled-backends)))

      ;; use indent-tabs-mode
      (defvar indent-tabs-mode t)

      ;; Tab width
      (setq tab-width 2)

      ;; Change save path
      (setq
       backup-by-copying t
       backup-directory-alist '(("." . "~/.saves"))
       auto-save-file-name-transforms '((".*" "~/.saves/" t))
       delete-old-versions t
       kept-new-versions 6
       kept-old-versions 2
       version-control t)
    #+END_SRC
    
** Plugin and Mode Configuration
*** Electric Pair Mode
    #+BEGIN_SRC emacs-lisp
      (electric-pair-mode)
    #+END_SRC
*** Org Mode
     #+BEGIN_SRC emacs-lisp
       (defvar org-log-done 'time)
       (defvar org-agenda-files (list "~/dotfiles/documents/todo/todo.org.gpg"))

       (global-set-key (kbd "C-c a") 'org-agenda)
       (defvar org-todo-keywords '((type "BUG(b)" "IN-PROGRESS" "WAITING" "|" "FIXED(f@)")
                                   (type "SUGGESTION(s)" "ENHANCEMENT(e)" "|" "ADDED(a@)")
                                   (type "GOAL(g)" "|" "DONE(d!)")
                                   (type "|" "CANCELED(c@)")
                                   (type "TODO" "IN-PROGRESS" "WAITING" "|" "DONE(d!)")))

       (defvar
         org-export-backends '(ascii
                               md
                               html
                               odt
                               org
                               latex
                               man))

       (defvar org-clock-persist 'history)
       (org-clock-persistence-insinuate)

       (add-hook 'org-mode-hook (lambda () (visual-line-mode)))
     #+END_SRC
*** Smex
    #+BEGIN_SRC emacs-lisp
      (require 'smex)
      (global-set-key (kbd "M-x") 'smex)
      (global-set-key (kbd "M-X") 'smex-major-mode-commands)
      (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
    #+END_SRC
    
*** Helm
     #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c b") 'helm-buffers-list)
(defvar helm-mode-handle-completion-in-region nil)

(defvar helm-command-prefix-key "C-c h")

(require 'helm-config)
(defvar helm-google-suggest-use-curl-p t)
(defvar helm-quick-update t)
(defvar helm-idle-delay 0.01)
(defvar helm-input-idle-delay 0.01)
(defvar helm-ff-search-library-in-sexp t)

(defvar helm-split-window-default-side 'other )
(defvar helm-split-window-in-side-p t )
(defvar helm-buffers-favorite-modes '(picture-mode artist-mode))
(defvar helm-candidate-number-limit 200 )
(defvar helm-M-x-requires-pattern 0     )
(defvar helm-boring-file-regexp-list '("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$" "\\._darcs$" "\\.la$" "\\.o$" "\\.i$") )
(defvar helm-ff-file-name-history-use-recentf t)
(defvar helm-move-to-line-cycle-in-source t )
(defvar ido-use-virtual-buffers t)
(defvar helm-buffers-fuzzy-matching t)

(helm-mode 1)
     #+END_SRC
     
**** Helm gtags
      #+BEGIN_SRC emacs-lisp
(defvar helm-gtags-prefix-key "\C-cg")

(require 'helm-gtags)

(setq
 helm-gtags-ignore-case t
 helm-gtags-auto-update t
 helm-gtags-use-input-at-cursor t
 helm-gtags-pulse-at-cursor t
 helm-gtags-suggested-key-mapping t
 )

(add-hook 'dired-mode-hook 'helm-gtags-mode)
(add-hook 'eshell-mode-hook 'helm-gtags-mode)

(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
(add-hook 'java-mode-hook 'helm-gtags-mode)
(add-hook 'asm-mode-hook 'helm-gtags-mode)

(define-key helm-gtags-mode-map (kbd "M-s") 'helm-gtags-select)
(define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
(define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
(define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
(define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
      #+END_SRC
      
*** Semantic
     #+BEGIN_SRC emacs-lisp
(require 'cc-mode)
(require 'semantic)

(global-semanticdb-minor-mode 1)
(global-semantic-idle-scheduler-mode 1)

(semantic-mode 1)
     #+END_SRC
          
*** Company
     #+BEGIN_SRC emacs-lisp
       (add-hook 'after-init-hook 'global-company-mode)
       (defvar company-backends '(company-clang
                                  company-ghc
                                  company-semantic
                                  company-gtags
                                  company-c-headers
                                  company-cmake
                                  company-files
                                  company-elisp
                                  company-auctex
                                  company-tern
                                  company-css
                                  company))
       (defvar company-idle-delay 0.2)
       (defvar company-minimum-prefix-length 4)

     #+END_SRC
    
*** C Indentation mode
     #+BEGIN_SRC emacs-lisp
(defvar c-defualt-style "linux")
     #+END_SRC
     
*** Smartparens
     #+BEGIN_SRC emacs-lisp
(require 'smartparens-config)
(show-smartparens-global-mode +1)
(smartparens-global-mode 1)

(defun ragesalmon-newline-sp (&rest _ignored)
  "Indent properly when enter is pressed inside of curly braces."
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode)
  )

(sp-local-pair 'c-mode "{" nil  :post-handlers '((ragesalmon-newline-sp "RET")))
(sp-local-pair 'c++-mode "{" nil  :post-handlers '((ragesalmon-newline-sp "RET")))
(sp-local-pair 'js2-mode "{" nil  :post-handlers '((ragesalmon-newline-sp "RET")))
(sp-local-pair 'css-mode "{" nil  :post-handlers '((ragesalmon-newline-sp "RET")))
(setq sp-autoskip-closing-pair (quote always))
(defvar sp-autoescape-string-quote nil)
     #+END_SRC emacs-lisp
     
*** Js2 Mode
     #+BEGIN_SRC emacs-lisp
(autoload 'js2-mode "js2-mode.el" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
     #+END_SRC
     
*** Tern
     #+BEGIN_SRC emacs-lisp
(autoload 'tern-mode "tern.el" nil t)
(add-hook 'js2-mode-hook (lambda () (tern-mode t)))
     #+END_SRC
     
*** Flycheck
     #+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'global-flycheck-mode)
(add-hook 'c++-mode-hook
          (lambda () (setq flycheck-clang-standard-library "libc++")))
(add-hook 'c++-mode-hook
          (lambda () (setq flycheck-clang-language-standard "c++11")))

(add-hook 'c-mode-hook
          (lambda () (setq flycheck-clang-standard-library "libc")))

(if (eq system-type 'windows-nt)
    (progn
      (add-hook 'c++-mode-hook
				(lambda () (setq flycheck-clang-include-path
								 (list (expand-file-name "C:/msys64/mingw64/include")
									   (expand-file-name "C:/msys64/mingw64/x86_64-w64-mingw32/include")))))
      (add-hook 'c-mode-hook
				(lambda () (setq flycheck-clang-include-path
								 (list (expand-file-name "C:/msys64/mingw64/include")
									   (expand-file-name "C:/msys64/mingw64/x86_64-w64-mingw32/include")))))
      )
  )

(defvar flycheck-idle-change-delay 5.0)
     #+END_SRC
     
*** Anything
     #+BEGIN_SRC emacs-lisp
(require 'anything-match-plugin)
(require 'anything-config)
     #+END_SRC
     
*** Neotree
     #+BEGIN_SRC emacs-lisp
(require 'neotree)
     #+END_SRC
     
*** Rainbow delimiters
    #+BEGIN_SRC emacs-lisp
      (require 'rainbow-delimiters)
      (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode-enable)
      (add-hook 'c-mode-hook 'rainbow-delimiters-mode-enable)
      (add-hook 'c++-mode-hook 'rainbow-delimiters-mode-enable)
      (add-hook 'lisp-mode-hook 'rainbow-delimiters-mode-enable)
    #+END_SRC
    
*** Encryption
     #+BEGIN_SRC emacs-lisp
(epa-file-enable)
     #+END_SRC
     
*** COMMENT Powerline
    #+BEGIN_SRC emacs-lisp :tangle no
      (require 'powerline)
      (setq-default powerline-default-separator 'bar)
      (powerline-default-theme)
    #+END_SRC
    
*** Auctex
     #+BEGIN_SRC emacs-lisp
(defvar TeX-auto-save t)
(defvar TeX-parse-self t)
(defvar TeX-master nil)

(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)


(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(defvar reftex-plug-into-AUCTeX t)
(require 'tex)
(TeX-global-PDF-mode t)

(defvar buffer-sans-gpg nil)
(defun ragesalmon-enable-gpg-TeX-compile()
  "This function will quickly write a file with extension .tex and compile it, and then delete it."
  (interactive)
  (setq buffer-sans-gpg (replace-regexp-in-string "\.gpg" "" (file-truename buffer-file-name)))
  (add-hook 'after-save-hook (progn
							   (with-current-buffer (find-file-noselect buffer-sans-gpg)
								 (save-buffer)
								 (tex-compile default-directory)
								 (delete-file buffer-sans-gpg))) nil t))
     #+END_SRC
     
*** Aggressive Indent mode
     #+BEGIN_SRC emacs-lisp
(global-aggressive-indent-mode 1)
(add-to-list 'aggressive-indent-excluded-modes 'html-mode)
     #+END_SRC
     
*** Expand-Region
	#+BEGIN_SRC emacs-lisp
 (require 'expand-region)
	#+END_SRC
*** Undo-Tree
    #+BEGIN_SRC emacs-lisp
      (global-undo-tree-mode)
    #+END_SRC
*** Ace-Jump
	#+BEGIN_SRC emacs-lisp
      ;; Placeholder
	#+END_SRC
*** SLIME
    #+BEGIN_SRC emacs-lisp
      (require 'slime)
      (require 'slime-autoloads)
      (setq inferior-lisp-program "sbcl")
      (setq slime-contribs '(slime-fancy))
      (setq slime-auto-connect 'ask)
      (slime-setup)

    #+END_SRC
*** ISpell
    #+BEGIN_SRC emacs-lisp
      (if (eq system-type 'windows-nt)
          (setq ispell-program-name "C:/Aspell/bin/aspell.exe"))
    #+END_SRC
*** Skewer Mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'js2-mode-hook 'skewer-mode)
  (add-hook 'css-mode-hook 'skewer-css-mode)
  (add-hook 'html-mode-hook 'skewer-html-mode)
#+END_SRC
*** ESS
    #+BEGIN_SRC emacs-lisp
      (require 'ess-site)

    #+END_SRC
*** Processing
    #+BEGIN_SRC emacs-lisp
      (defvar processing-location "c:/processing-2.2.1/processing-java.exe")
      (defvar processing-application-dir "c:/processing-2.2.1/")
      (defvar processing-application-dir "~/githubs/processing")
    #+END_SRC
*** Web-Mode
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
      (defvar web-mode-enable-tab-indentation t)
      (add-hook 'web-mode-hook (lambda ()
                                 (setq web-mode-markup-indent-offset 3)
                                 (setq web-mode-css-indent-offset 3)
                                 (setq web-mode-code-indent-offset 3)))
    #+END_SRC
*** Jade-Mode
    #+BEGIN_SRC emacs-lisp
      (add-hook 'jade-mode-hook (lambda ()
                                  (interactive)
                                  (yas-minor-mode -1)
                                  (define-key evil-normal-state-map (kbd "TAB") (sws-do-indent-line))
                                  (define-key evil-insert-state-map (kbd "TAB") (sws-do-indent-line))))
    #+END_SRC
*** Haskell Mode
    #+BEGIN_SRC emacs-lisp
      (add-hook 'haskell-mode-hook 'haskell-indentation-mode)

      (let ((my-cabal-path (expand-file-name "~/.cabal/bin")))
        (setenv "PATH" (concat my-cabal-path ":" (getenv "PATH")))
        (add-to-list 'exec-path my-cabal-path))
      (custom-set-variables '(haskell-tags-on-save t))

      (add-hook 'haskell-mode-hook (lambda ()
                                     (interactive)
                                     (ghc-init)
                                     (turn-on-haskell-indentation)
                                     (aggressive-indent-mode -1)))

    #+END_SRC
*** Evil
**** Evil Mode
     #+BEGIN_SRC emacs-lisp
       (evil-mode 1)


       ;; Set evil to ignore certain modes
       (evil-set-initial-state 'term-mode 'emacs)
       (evil-set-initial-state 'eshell-mode 'emacs)
       (evil-set-initial-state 'dired-mode 'emacs)
       (evil-set-initial-state 'haskell-interactive-mode 'emacs)
       (evil-set-initial-state 'haskell-error-mode 'emacs)
       (evil-set-initial-state 'magit-popup-mode 'emacs)
     #+END_SRC
***** Evil Keybinds
      #+BEGIN_SRC emacs-lisp
        (evil-global-set-key 'visual "a" 'align-regexp)
        (evil-global-set-key 'insert (kbd "C-e") (evil-move-end-of-line))
        (evil-global-set-key 'insert (kbd "C-a") (evil-move-beginning-of-line))
        (evil-global-set-key 'normal (kbd "C-a") (evil-move-beginning-of-line))
        (define-key evil-normal-state-map (kbd "C-e") (evil-move-end-of-line))
        (evil-global-set-key 'insert "j" 'zovt/maybe-esc)
        (evil-global-set-key 'normal ";" 'evil-ex)
        (evil-global-set-key 'normal "U" 'undo-tree-visualize)

        ;; set up a pseudo-leader
        (evil-global-set-key 'normal (kbd "<SPC>") (lambda () (interactive) (setq unread-command-events (listify-key-sequence "\C-c"))))
      #+END_SRC
** Keybindings
   #+BEGIN_SRC emacs-lisp
     ;; Code-related binds
     (global-set-key (kbd "C-c c =") 'indent-whole-buffer)
     (global-set-key (kbd "C-c =") 'er/expand-region)
     (global-set-key (kbd "C-c c i") 'imenu)

     ;;; Mode-specific
     (eval-after-load 'slime
       '(define-key slime-mode-map (kbd "C-c e") 'slime-eval-buffer))

     ;; Movement-related binds
     (global-set-key (kbd "C->") 'end-of-buffer)
     (global-set-key (kbd "C-<") 'beginning-of-buffer)
     (global-set-key (kbd "C-c <SPC>") 'ace-jump-mode)
     (global-set-key (kbd "C-c j") 'ace-jump-mode)
     (global-set-key (kbd "C-c b") 'switch-to-buffer)

     ;; Window binds
     (global-set-key (kbd "C-c 0") 'delete-window)
     (global-set-key (kbd "C-c 1") 'delete-other-windows)
     (global-set-key (kbd "C-c 2") 'split-window-vertically)
     (global-set-key (kbd "C-c 3") 'split-window-horizontally)
     (global-set-key (kbd "C-c o") 'other-window)
     (global-set-key (kbd "C-c O") (lambda () (interactive) (other-window -1)))

     ;; Editing-related binds
     (global-set-key (kbd "C-c r") 'align-regexp)
     (global-set-key (kbd "C-c M w") 'writing-mode)

     ;; Utility-related binds
     (global-set-key (kbd "C-x u") 'undo-tree-visualize)
     (global-set-key (kbd "C-c x") 'smex)

     ;;; Magit
     (global-set-key (kbd "C-c m m") 'magit-status)
     (global-set-key (kbd "C-c m c") 'magit-commit)
     (global-set-key (kbd "C-c m C") 'magit-commit-amend)
     (global-set-key (kbd "C-c m P") 'magit-push)
     (global-set-key (kbd "C-c m f") 'magit-fetch)
     (global-set-key (kbd "C-c m F") 'magit-pull)
     (global-set-key (kbd "C-c m d") 'magit-diff-working-tree)

     ;; File-related binds
     (global-set-key (kbd "C-c f o") 'helm-buffer-list)
     (global-set-key (kbd "C-c f x") 'kill-other-buffers)
     (global-set-key (kbd "C-c f f") 'find-file)

     ;; Leave minibuffer with ESC
     (define-key minibuffer-local-map (kbd "ESC") 'keyboard-escape-quit)
     (add-hook 'after-init-hook (lambda () (define-key helm-map (kbd "ESC") 'keyboard-escape-quit)))

   #+END_SRC
** Custom Functions
   #+BEGIN_SRC emacs-lisp
     ;; Delete all but current buffer
     (defun kill-other-buffers ()
       "Kill all other buffers."
       (interactive)
       (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

     (defun indent-whole-buffer ()
       "Indent the whole buffer."
       (interactive)
       (point-to-register ?m)  
       (mark-whole-buffer)
       (indent-region (region-beginning) (region-end))
       (jump-to-register ?m))

     (defun zovt/maybe-esc ()
       "Maybe escape in insert mode after KEY-STRING is pressed. Taken from StackOverflow"
       (interactive)
       (let ((modified (buffer-modified-p)))
         (insert "j")
         (let ((evt (read-event (format "Insert %c to exit insert state" ?k)
                                nil 0.5)))
           (cond ((null evt) (message " "))
                 ((and (integerp evt) (char-equal evt ?k))
                  (delete-char -1)
                  (set-buffer-modified-p modified)
                  (push 'escape unread-command-events))
                 (t (setq unread-command-events (append unread-command-events (list evt))))))))

     ;; Automatic theme switching
     (setq custom-enabled-themes nil)

     ;; (defun sync-theme ()
     ;;  (setq hour (string-to-number (substring (current-time-string) 11 13)))
     ;;  (if (and (> hour 6) (< hour 17))
     ;;      (progn (disable-theme 'moe-dark)
     ;;             (load-theme 'moe-light t nil))
     ;;    (progn (disable-theme 'moe-light)
     ;;           (load-theme 'moe-dark t nil))))

     ;; (run-with-timer 0 3600 'sync-theme)
   #+END_SRC
*** Minimal writing mode
    #+BEGIN_SRC emacs-lisp
      (defvar-local hidden-mode-line-mode nil)
      (defvar-local hidden-mode-line nil)
      (defvar-local hidden-mode-line-mode-enabled nil)

      (defun hidden-mode-line-mode ()
	"Minor mode to hide the mode-line in the current buffer."
	:init-value nil
	:global nil
	:variable hidden-mode-line-mode
	:group 'editing-basics
	(if (not hidden-mode-line-mode-enabled)
	    (setq hidden-mode-line mode-line-format
		  mode-line-format nil
		  hidden-mode-line-mode-enabled t)
	  (setq mode-line-format hidden-mode-line
		hidden-mode-line nil
		hidden-mode-line-mode-enabled nil))
	(force-mode-line-update)
	(redraw-display)
	(when (and (called-interactively-p 'interactive)
		   hidden-mode-line-mode)
	  (run-with-idle-timer 0 nil 'message
			       (concat "Hidden Mode Line Mode enabled. Use M-x hidden-mode-line-mode to make the mode-line appear."))))

      (defvar-local big-fringe-mode nil)
      (defvar-local big-fringe-mode-enabled nil)
      (define-minor-mode big-fringe-mode ()
	"Minor mode for using a big fringe."
	:init-value nil
	:global t
	:variable big-fringe-mode
	:group 'editing-basics
	(if (not big-fringe-mode-enabled)
	    (progn (set-fringe-style nil)
		   (set-fringe-mode
		    (/ (- (frame-pixel-width)
			  (* 80 (frame-char-width)))
		       2))
		   (setq big-fringe-mode-enabled t))
	  (progn (set-fringe-style '(8 . 8))
		 (setq big-fringe-mode-enabled nil))))


      (defvar-local writing-mode nil)
      (defvar-local writing-mode-enabled nil)
      (define-minor-mode writing-mode ()
	"Enable writing mode."
	:init-value nil
	:global nil
	:variable writing-mode
	:group 'writing-mode-group
	(interactive)
	(if (not writing-mode-enabled)
	    (progn (hl-line-mode t)
		   (big-fringe-mode)
		   (hidden-mode-line-mode)
		   (setq writing-mode-enabled t))
	  (progn (hl-line-mode nil)
		 (big-fringe-mode)
		 (hidden-mode-line-mode)
		 (setq writing-mode-enabled nil))))

    #+end_src
    
* Provide Init
   #+BEGIN_SRC emacs-lisp
(provide 'init)
   #+END_SRC
